- Command to inspect permissions: ls -l /etc/shadow

- Command to set permissions (if needed):sudo chmod 600 /etc/shadow
Permissions on `/etc/gshadow` should allow only `root` read and write access.

    - Command to inspect permissions: ls -l /etc/gshadow

    - Command to set permissions (if needed): sudo chmod 600 /etc/gshadow
    Permissions on `/etc/group` should allow `root` read and write access, and allow everyone else read access only.
    
        - Command to inspect permissions: ls â€“ l /etc/group
    
        - Command to set permissions (if needed): sudo chmod 644 /etc/group
        Permissions on `/etc/passwd` should allow `root` read and write access, and allow everyone else read access only.
        
            - Command to inspect permissions: ls -l /etc/passwd
        
            - Command to set permissions (if needed): sudo chmod 644/etc/passwd
            Step 2: Create User Accounts
            
            Add user accounts for `sam`, `joe`, `amy`, `sara`, and `admin`.
            
                - Command to add each user account (include all five users):
            root@UbuntuDesktop:-# sudo adduser sam
            root@UbuntuDesktop:-# sudo adduser joe
            root@UbuntuDesktop:-# sudo adduser amy
            root@UbuntuDesktop:-# sudo adduser sara
            root@UbuntuDesktop:-# sudo adduser admin

    Ensure that only the `admin` has general sudo access.

    - Command to add `admin` to the `sudo` group:  sudo usermod -aG sudo admin

    Create User Group and Collaborative Folder
    
    Add an `engineers` group to the system.
    
        - Command to add group: sudo groupadd engineers

        Add users `sam`, `joe`, `amy`, and `sara` to the managed group.
        
        - Command to add users to `engineers` group (include all four users): sudo usermod -aG engineers (user)

Create a shared folder for this group at `/home/engineers`.

- Command to create the shared folder: sudo mkdir engineers

Change ownership on the new engineers' shared folder to the `engineers` group.

    - Command to change ownership of engineer's shared folder to engineer group: 
sudo chown -R :engineers /home/engineers
sudo chown root /home/engineers

Step 4: Lynis Auditing

Command to install Lynis: Sudo apt install lynis



Step 1: Create, Extract, Compress, and Manage tar Backup Archives

Command to **extract** the `TarDocs.tar` archive to the current directory:
 Tar xvf TarDocs.tar

 Command to **create** the `Javaless_Doc.tar` archive from the `TarDocs/` directory, while excluding the `TarDocs/Documents/Java` directory:
 tar -cvf Javaless_Doc.tar --exclude TarDocs/Documents/Java TarDocs

 Command to ensure `Java/` is not in the new `Javaless_Docs.tar` archive:
 tar tvvf Javaless_Docs.tar | grep 'Java'

 Step 2: Create, Manage, and Automate Cron Jobs
 
 Cron job for backing up the `/var/log/auth.log` file:
 0 6 * * 3 tar czf ~/TarDocs/aut_backup.tgz /var/log/auth.log

 Step 3: Write Basic Bash Scripts
 
 Brace expansion command to create the four subdirectories:
 mkdir -p ~/backups/{freemem,diskuse,openlist,freedisk} 

 Paste your `system.sh` script edits below:
 
     ```bash
     #!/bin/bash
     [Your solution script contents here]
     ```
 free -h > ~/backups/freemem/free_mem.txt
 df -h > ~/backups/diskuse/disk_usage.txt
 lsof -h > ~/backups/openlist/open_list.txt
 df  -h > ~/backups/freedisk/free_disk.txt

 Command to make the `system.sh` script executable:
 chmod +x system.sh

Step 4: Perform Various Log Filtering Techniques

Command to return `journalctl` messages with priorities from emergency to error:
journalctl -b -p emerg..err

. Command to check the disk usage of the system journal unit since the most recent boot:
journalctl -b -u systemd-journald | tail -1

Command to remove all archived journal files except the most recent two:
journalctl | tail -2

Step 5. Create Priority-Based Log Files -/var/log/debug

Command to record all mail log messages, except for debug, to `/var/log/mail.log`:
Sudo nano /etc/

Step 6. Manage Log File Sizes

Run `sudo nano /etc/logrotate.conf` to edit the `logrotate` configuration file. 

    Configure a log rotation scheme that backs up authentication messages to the `/var/log/auth.log`.

    - Add your config file edits below:

    ```bash
    [Your logrotate scheme edits here]`
    ```
/var/log/wtmp {
    missingok
    weekly
    notifempty
    delaycompress
    create 0664 root utmp
    rotate 7
}
/var/log/btmp {
    missingok
    weekly
    notifempty
    delaycompress
    create 0660 root utmp
    rotate 7
}

Step 1: Shadow People
Create a secret user named `sysd`. Make sure this user doesn't have a home folder created:
sudo useradd --system --no-create-home sysd

Give your secret user a password:
sudo passwd sysd

Give your secret user a system UID < 1000:
sudo passwd sysd
id

Give your secret user the same GID:
id sysd
sudo groupmod -g 997 sysd
sudo visudo

Give your secret user full `sudo` access without the need for a password:
sudo groupmod -g 997 sysd
sudo visudo

Test that `sudo` access works without your password:
su sysd

Step 2: Smooth Sailing
nano sshd_config
Port 22
Port 2222

Step 3: Testing Your Configuration Update
Restart the SSH service:
sudo nano /etc/ssh/sshd_config
sudo systemctl restart sshd_config
sudo systemctl restart ssh
systemctl restart sshd

Exit the 'root' account:
exit

SSH to the target machine using your `sysd` account and port `2222`:

Use `sudo` to switch to the root user:
sudo su root

Step 4: Crack All the Passwords
SSH back to the system using your `sysd` account and port `2222`:
Escalate your privileges to the `root` user. Use John to crack the entire `/etc/shadow` file:
john /etc/shadow


